theme_light()+  ylab("Expected visits")+xlab("Connectance") +labs(col = "Nestedness") +theme(legend.position = "none")
dev.null <- glm.conn_nest3$null.deviance
dev.resid <- glm.conn_nest3$deviance
dev.explained <- (dev.null - dev.resid)/dev.null*100
dev.explained
#Checked model assumption with the DHARMa R package but output looks weird?
#simResids <- simulateResiduals(glm.conn_nest2)
#plot(simResids)
#abundMod3 <- glm.nb(round(pvis) ~ connectance*nestedness,data=df.vis)
#summary(abundMod3)
#plot_model(glm.mod, type = "int")#type = "int" will automatically plot the interaction terms, however, using mdrt.values = "minmax"
#lm.mod<-lm(round(pvis) ~ connectance*nestedness, data=df.vis, family=poisson())
#summary(lm.mod)
#plot_model(lm.mod, type="pred", terms = c("connectance", "nestedness [30, 50, 70]"))
#plot_model(lm.mod, type = "int")#type = "int" will automatically plot the interaction terms, however, using mdrt.values = "minmax"
#poor model fit (239879-231798)/239879*100
ggarrange(plot_glm.conn_nest1, plot_glm.conn_nest2, plot_glm.conn_nest3,  labels = c("A", "B", "C"), ncol = 3, common.legend = TRUE)
#glm.conn_nest_pref1<-glm(round(number_visits) ~ connectance*nestedness*pl.pref, data=df.vis, family=poisson())
#summary(glm.conn_nest_pref1)
#dev.null <- glm.conn_nest_pref1$null.deviance
#dev.resid <- glm.conn_nest_pref1$deviance
#dev.explained <- (dev.null - dev.resid)/dev.null*100
#dev.explained
glm.conn_nest_dens1<-glm(round(number_visits) ~ connectance*nestedness*pl.dens, data=df.vis, family=poisson())
summary(glm.conn_nest_dens1)
pred <- expand.grid(connectance=seq(0,1,0.1), nestedness=c(30, 50, 70), pl.dens=c(0.2, 0.5, 0.7))
pred$y <- predict(glm.conn_nest_dens1, pred, type="response")
ggplot(pred,aes(x=connectance,y=y,color=factor(nestedness),group=nestedness))+geom_line()+
facet_grid(~pl.dens,labeller ="label_both") +
theme_light()+  ylab("Visitation rate")+xlab("Connectance") +labs(col = "Nestedness") +theme(strip.text.x = element_text(size = 12))
dev.null <- glm.conn_nest_dens1$null.deviance
dev.resid <- glm.conn_nest_dens1$deviance
dev.explained <- (dev.null - dev.resid)/dev.null*100
dev.explained
#with plant density
#glm.conn_nest_pref_dens1<-glm(round(number_visits) ~ connectance*nestedness*pl.pref*pl.dens, data=df.vis, family=poisson())
#summary(glm.conn_nest_pref_dens1)
#dev.null <- glm.conn_nest_pref_dens1$null.deviance
#dev.resid <- glm.conn_nest_pref_dens1$deviance
#dev.explained <- (dev.null - dev.resid)/dev.null*100
#dev.explained
#plot_glm.conn_nest_pref_dens1<-plot_model(glm.conn_nest_pref_dens1, type="pred", terms = c("connectance", "nestedness[0, 30, 50, 70]"))+
#set wd
setwd("C:/Users/skort/Documents/field work Nepal/field_data")
getwd()
#set wd
setwd("C:/Users/skort/Documents/field work Nepal/field_data")
#set wd
setwd("C:/Users/skort/Documents/field work Nepal/field_data")
#set wd
setwd("C:/Users/skort/Documents/field work Nepal/field_data")
getwd()
#load library
library(tidyverse)
o.7^4
0.7^4
#boxplot honey yield decline
boxplot(hy[, c(3:7)], ylab="kg honey per hive", xlab="years")
### KOB_2018_FOOD_WEB
#set working directory
#setwd("C:/LocalData/susakort/AOF_proposal/Mesosom_analyses/R_scripts")
setwd("C:/LocalData/susakort/Lucinda/Mesosom_analyses/kob_2018/R_scripts")
getwd()
### KOB_2018_FOOD_WEB
#set working directory
#setwd("C:/LocalData/susakort/AOF_proposal/Mesosom_analyses/R_scripts")
setwd("C:/LocalData/susakort/Lucinda/Mesosom_analyses/kob_2018/R_scripts")
### KOB_2018_FOOD_WEB
#set working directory
#setwd("C:/LocalData/susakort/AOF_proposal/Mesosom_analyses/R_scripts")
setwd("C:/LocalData/susakort/Lucinda/Mesosom_analyses/kob_2018/R_scripts")
### KOB_2018_FOOD_WEB
#set working directory
#setwd("C:/LocalData/susakort/AOF_proposal/Mesosom_analyses/R_scripts")
setwd("C:/LocalData/susakort/Lucinda/Mesosom_analyses/kob_2018/R_scripts")
getwd()
exp(5.34+1*0.3)
exp(5.34+3*0.3)
exp(5.34+8*0.3)
exp(5.34+7*0.3)
exp(5.34+3*0.3-1.13)
exp(5.34+1*0.3-1.13)
exp(5.34+7*0.3-1.13)
exp(5.34+7*0.3)
exp(5.34+7*0.3)/10
exp(5.34+7*0.3)/10*600
exp(5.34+7*0.3)/600
*10
28
#data
vis_data<-read.csv("../Data/NLdata.csv", header=TRUE) #import data
list.files()
list.files
list.file
log(-12)
log(0)
log(1)
log(0.00005)
log(0.000005)
#working dir
setwd("C:/LocalData/susakort/SEM_model/RscriptsBauer2022")
library("igraph")
library("fluxweb")
library(tidyverse) #visuals and data treatment
library(lavaan)
library(mice)
library(lavaanPlot)
library (vegan) #multivariate analyses
library(factoextra) #used for the biplots
source("Tools.R") #food web tools
getwd()
#working dir
setwd("C:/LocalData/susakort/SEM_model/RscriptsBauer2022")
tree <- geiger::sim.bdtree(b=0.1, d=0, stop="taxa", n=50)
install.packages("gieger")
install.packages("geiger")
# NOT RUN {
#example of how to calculate the FDis of a series of plots based on the trait values
#of a set of species. begin by simulating a phylogeny with a birth-death process
tree <- geiger::sim.bdtree(b=0.1, d=0, stop="taxa", n=50)
tree
#create a log-normal abundance distribution
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1
sim.abundances
hist(sim.abundances)
#simulate a community data matrix, with species as columns and sites as rows
cdm <- simulateComm(tree, richness.vector=10:25, abundances=sim.abundances)
library(geiger)
install.packages("ape")
install.packages("ape")
# NOT RUN
library(geiger)
library(ape)
#simulate a community data matrix, with species as columns and sites as rows
cdm <- simulateComm(tree, richness.vector=10:25, abundances=sim.abundances)
#simulate a community data matrix, with species as columns and sites as rows
cdm <- install.packages("metricTester")
#simulate a community data matrix, with species as columns and sites as rows
install.packages("metricTester")
install.packages("metr")
install_github("metricTester/eliotmiller")
install.packages("devtools")
#simulate a community data matrix, with species as columns and sites as rows
library(devtools)
install_github("metricTester/eliotmiller")
install_github("metricTester")
install_github("metricTester/eliotmiller")
#' Generate a simulated community data matrix
#'
#' Given a phylo object, a vector of desired species richnesses, and a vector of potential
#' species abundances, will generate a community data matrix with these characteristics.
#'
#' @param tree Phylo object
#' @param richness.vector Vector of desired species richness, one for each desired plot
#' @param abundances A vector of potential abundances, e.g. a log-normal distribution
#'
#' @details There is currently no implementation to control the frequency with which a
#' given species is selected. As of metricTester 1.2.2, this function no longer can
#' occasionally return a CDM missing species that are in the input phylogeny.
#'
#' @return A community data matrix (as a data frame) with species as columns and sites as
#' rows.
#'
#' @export
#'
#' @importFrom ape drop.tip
#'
#' @references Miller, E. T., D. R. Farine, and C. H. Trisos. 2016. Phylogenetic community
#' structure metrics and null models: a review with new methods and software.
#' Ecography DOI: 10.1111/ecog.02070
#'
#' @examples
#' #simulate tree with birth-death process
#' tree <- geiger::sim.bdtree(b=0.1, d=0, stop="taxa", n=50)
#'
#' sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1
#'
#' cdm <- simulateComm(tree, richness.vector=10:25, abundances=sim.abundances)
simulateComm <- function(tree, richness.vector, abundances)
{
#set up a quick check to confirm that you are not asking the function to sample more
#species than are in the tree
if(max(richness.vector) > length(tree$tip.label))
{
stop("Cannot create a CDM with more species than are in the input phylogeny")
}
#check that there are no values less than 1 in the abundances vector
if(min(abundances <= 0))
{
stop("simulateComm cannot handle abundances of less than or equal to 0")
}
#set up a matrix of zeros of the correct dimensions for the output cdm
cdm <- matrix(nrow=length(richness.vector), ncol=length(tree$tip.label), 0)
#give the cdm row and column names
colnames(cdm) <- tree$tip.label
row.names(cdm) <- paste("plot",1:dim(cdm)[1], sep="")
setwd("C:/LocalData/susakort/field work Nepal/Honeybee_decline_Nepal/Rscripts")
#Figure dir and pixels
ppi<-300 #pixels per inches
dirF<-"../Figures/"
#load library
library(tidyverse)
library(tidytext)
library(ggpubr)
library(ggpmisc)
library(rstatix)
#data
dt<-read.csv("../data/beehive_data_all.csv")
hy<-read.csv("../data/honey_yield_change.csv", sep=";",check.names=FALSE)
colnames(hy)
head(hy)
#beehive change
bc<-read.csv("../data/beehive_change.csv", sep=";",check.names=FALSE)
bc
head(bc)
colnames(bc)
#colnames(bc)[(4:8)]<-c("2009", "2011", "2017", "2019", "2021")
#bkc<-read.csv("../data/beekeeper_change.csv", check.names=FALSE)
#livestock change
lsc<-read.csv("../data/farmer_livestock.csv", sep=";",check.names=FALSE)
colnames(lsc)
lsc
#apple change
apl<-read.csv("../data/apple_change.csv", sep=";",check.names=FALSE)
colnames(apl)
apl
#reasons for the decline
rd<-read.csv("../data/reasons_decline.csv", sep=";",check.names=FALSE)
colnames(rd)
rd
#reasons for the fewer flowers
lf<-read.csv("../data/reasons_less_flowers.csv", sep=";",check.names=FALSE)
colnames(lf)
lf
hi_crop<-read.csv("../data/honeybee_importance_percrop_pervillage.tsv.csv", sep="",check.names=FALSE)
head(hi_crop)
pv<-read.csv("../data/pollinator_visitation_data.csv", sep=";",check.names=FALSE)
colnames(pv)
head(pv)
names(pv)
pv %>% select(village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat)
pv %>% select(village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
filter(insect_OTU=="Apis_cerana")
pv %>% select(village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
filter(pollinator_taxa=="Honeybee")
honeybees <- pv %>% select(village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
filter(pollinator_taxa=="Honeybee")
honeybees$insect_OTU
unique(honeybees$insect_OTU)
pv %>% select(village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
group_by(village_coden insect_OTU) %>% summarize(insect_OTU = n() )
pv %>% select(village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
group_by(village_code, insect_OTU) %>% summarize(insect_OTU = n() )
pv %>% select(village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
group_by(village_code, pollinator_taxa, insect_OTU, plant_sci_name) %>% summarize(insect_OTU = n() )
pv %>% select(village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
group_by(village_code, pollinator_taxa, insect_OTU, plant_sci_name) %>% summarize(plant_sci_name = n() )
#number of visits of bees to plants
pv %>% select(village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
group_by(village_code, insect_OTU, plant_sci_name) %>% summarize(number_visits = n())
colnames(pv)
pv %>% select(survey_date, village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
group_by(survey_date, village_code, insect_OTU, plant_sci_name) %>% summarize(number_visits = n())
#number of visits of bees to plants
pv %>% select(survey_date, village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
group_by(survey_date, village_code, insect_OTU, plant_sci_name) %>% summarize(number_visits = n())
colnames(pv)
pv %>% select(survey_date, village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
group_by(survey_date, village_code, insect_OTU, plant_sci_name) %>% summarize(number_visits = n())
pv %>% select(survey_date, village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
group_by(village_code, insect_OTU, plant_sci_name) %>% summarize(number_visits = n())
no_vis<-pv %>% select(survey_date, village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
group_by(village_code, insect_OTU, plant_sci_name) %>% summarize(number_visits = n())
no_vis<-pv %>% select(survey_date, village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
group_by(village_code, pollinator_taxa, insect_OTU, plant_sci_name) %>% summarize(number_visits = n())
no_vis
View(no_vis)
no_vis
no_vis_poll_tax<-pv %>% select(survey_date, village_code, pollinator_taxa, insect_OTU, plant_sci_name, plot_altitude, plant_habitat) %>%
group_by(village_code, pollinator_taxa, plant_sci_name) %>% summarize(number_visits = n())
no_vis_poll_tax
hi_crop
unique(hi_crop$Crop)
pd<-read.csv("poll_dependence.csv, sep=";",check.names=FALSE)
pd<-read.csv("poll_dependence.csv", sep=";",check.names=FALSE)
pd<-read.csv("poll_dependence.csv", sep=";",check.names=FALSE)
getwd()
pd<-read.csv("../data/oll_dependence.csv", sep=";",check.names=FALSE)
pd<-read.csv("../data/poll_dependence.csv", sep=";",check.names=FALSE)
pd$
pd$sci_name
pd$sci_name
pd$
pd$sci_name
pd$plant_category
pd$
pd$poll_dependence
barplot(pd$poll_dependence)
