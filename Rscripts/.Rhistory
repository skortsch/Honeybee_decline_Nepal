theme_light()+  ylab("Expected visits")+xlab("Connectance") +labs(col = "Nestedness") +theme(legend.position = "none")
dev.null <- glm.conn_nest3$null.deviance
dev.resid <- glm.conn_nest3$deviance
dev.explained <- (dev.null - dev.resid)/dev.null*100
dev.explained
#Checked model assumption with the DHARMa R package but output looks weird?
#simResids <- simulateResiduals(glm.conn_nest2)
#plot(simResids)
#abundMod3 <- glm.nb(round(pvis) ~ connectance*nestedness,data=df.vis)
#summary(abundMod3)
#plot_model(glm.mod, type = "int")#type = "int" will automatically plot the interaction terms, however, using mdrt.values = "minmax"
#lm.mod<-lm(round(pvis) ~ connectance*nestedness, data=df.vis, family=poisson())
#summary(lm.mod)
#plot_model(lm.mod, type="pred", terms = c("connectance", "nestedness [30, 50, 70]"))
#plot_model(lm.mod, type = "int")#type = "int" will automatically plot the interaction terms, however, using mdrt.values = "minmax"
#poor model fit (239879-231798)/239879*100
ggarrange(plot_glm.conn_nest1, plot_glm.conn_nest2, plot_glm.conn_nest3,  labels = c("A", "B", "C"), ncol = 3, common.legend = TRUE)
#glm.conn_nest_pref1<-glm(round(number_visits) ~ connectance*nestedness*pl.pref, data=df.vis, family=poisson())
#summary(glm.conn_nest_pref1)
#dev.null <- glm.conn_nest_pref1$null.deviance
#dev.resid <- glm.conn_nest_pref1$deviance
#dev.explained <- (dev.null - dev.resid)/dev.null*100
#dev.explained
glm.conn_nest_dens1<-glm(round(number_visits) ~ connectance*nestedness*pl.dens, data=df.vis, family=poisson())
summary(glm.conn_nest_dens1)
pred <- expand.grid(connectance=seq(0,1,0.1), nestedness=c(30, 50, 70), pl.dens=c(0.2, 0.5, 0.7))
pred$y <- predict(glm.conn_nest_dens1, pred, type="response")
ggplot(pred,aes(x=connectance,y=y,color=factor(nestedness),group=nestedness))+geom_line()+
facet_grid(~pl.dens,labeller ="label_both") +
theme_light()+  ylab("Visitation rate")+xlab("Connectance") +labs(col = "Nestedness") +theme(strip.text.x = element_text(size = 12))
dev.null <- glm.conn_nest_dens1$null.deviance
dev.resid <- glm.conn_nest_dens1$deviance
dev.explained <- (dev.null - dev.resid)/dev.null*100
dev.explained
#with plant density
#glm.conn_nest_pref_dens1<-glm(round(number_visits) ~ connectance*nestedness*pl.pref*pl.dens, data=df.vis, family=poisson())
#summary(glm.conn_nest_pref_dens1)
#dev.null <- glm.conn_nest_pref_dens1$null.deviance
#dev.resid <- glm.conn_nest_pref_dens1$deviance
#dev.explained <- (dev.null - dev.resid)/dev.null*100
#dev.explained
#plot_glm.conn_nest_pref_dens1<-plot_model(glm.conn_nest_pref_dens1, type="pred", terms = c("connectance", "nestedness[0, 30, 50, 70]"))+
#set wd
setwd("C:/Users/skort/Documents/field work Nepal/field_data")
getwd()
#set wd
setwd("C:/Users/skort/Documents/field work Nepal/field_data")
#set wd
setwd("C:/Users/skort/Documents/field work Nepal/field_data")
#set wd
setwd("C:/Users/skort/Documents/field work Nepal/field_data")
getwd()
#load library
library(tidyverse)
o.7^4
0.7^4
#boxplot honey yield decline
boxplot(hy[, c(3:7)], ylab="kg honey per hive", xlab="years")
### KOB_2018_FOOD_WEB
#set working directory
#setwd("C:/LocalData/susakort/AOF_proposal/Mesosom_analyses/R_scripts")
setwd("C:/LocalData/susakort/Lucinda/Mesosom_analyses/kob_2018/R_scripts")
getwd()
### KOB_2018_FOOD_WEB
#set working directory
#setwd("C:/LocalData/susakort/AOF_proposal/Mesosom_analyses/R_scripts")
setwd("C:/LocalData/susakort/Lucinda/Mesosom_analyses/kob_2018/R_scripts")
### KOB_2018_FOOD_WEB
#set working directory
#setwd("C:/LocalData/susakort/AOF_proposal/Mesosom_analyses/R_scripts")
setwd("C:/LocalData/susakort/Lucinda/Mesosom_analyses/kob_2018/R_scripts")
### KOB_2018_FOOD_WEB
#set working directory
#setwd("C:/LocalData/susakort/AOF_proposal/Mesosom_analyses/R_scripts")
setwd("C:/LocalData/susakort/Lucinda/Mesosom_analyses/kob_2018/R_scripts")
getwd()
exp(5.34+1*0.3)
exp(5.34+3*0.3)
exp(5.34+8*0.3)
exp(5.34+7*0.3)
exp(5.34+3*0.3-1.13)
exp(5.34+1*0.3-1.13)
exp(5.34+7*0.3-1.13)
exp(5.34+7*0.3)
exp(5.34+7*0.3)/10
exp(5.34+7*0.3)/10*600
exp(5.34+7*0.3)/600
*10
28
#data
vis_data<-read.csv("../Data/NLdata.csv", header=TRUE) #import data
list.files()
list.files
list.file
log(-12)
log(0)
log(1)
log(0.00005)
log(0.000005)
#working dir
setwd("C:/LocalData/susakort/SEM_model/RscriptsBauer2022")
library("igraph")
library("fluxweb")
library(tidyverse) #visuals and data treatment
library(lavaan)
library(mice)
library(lavaanPlot)
library (vegan) #multivariate analyses
library(factoextra) #used for the biplots
source("Tools.R") #food web tools
getwd()
#working dir
setwd("C:/LocalData/susakort/SEM_model/RscriptsBauer2022")
tree <- geiger::sim.bdtree(b=0.1, d=0, stop="taxa", n=50)
install.packages("gieger")
install.packages("geiger")
# NOT RUN {
#example of how to calculate the FDis of a series of plots based on the trait values
#of a set of species. begin by simulating a phylogeny with a birth-death process
tree <- geiger::sim.bdtree(b=0.1, d=0, stop="taxa", n=50)
tree
#create a log-normal abundance distribution
sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1
sim.abundances
hist(sim.abundances)
#simulate a community data matrix, with species as columns and sites as rows
cdm <- simulateComm(tree, richness.vector=10:25, abundances=sim.abundances)
library(geiger)
install.packages("ape")
install.packages("ape")
# NOT RUN
library(geiger)
library(ape)
#simulate a community data matrix, with species as columns and sites as rows
cdm <- simulateComm(tree, richness.vector=10:25, abundances=sim.abundances)
#simulate a community data matrix, with species as columns and sites as rows
cdm <- install.packages("metricTester")
#simulate a community data matrix, with species as columns and sites as rows
install.packages("metricTester")
install.packages("metr")
install_github("metricTester/eliotmiller")
install.packages("devtools")
#simulate a community data matrix, with species as columns and sites as rows
library(devtools)
install_github("metricTester/eliotmiller")
install_github("metricTester")
install_github("metricTester/eliotmiller")
#' Generate a simulated community data matrix
#'
#' Given a phylo object, a vector of desired species richnesses, and a vector of potential
#' species abundances, will generate a community data matrix with these characteristics.
#'
#' @param tree Phylo object
#' @param richness.vector Vector of desired species richness, one for each desired plot
#' @param abundances A vector of potential abundances, e.g. a log-normal distribution
#'
#' @details There is currently no implementation to control the frequency with which a
#' given species is selected. As of metricTester 1.2.2, this function no longer can
#' occasionally return a CDM missing species that are in the input phylogeny.
#'
#' @return A community data matrix (as a data frame) with species as columns and sites as
#' rows.
#'
#' @export
#'
#' @importFrom ape drop.tip
#'
#' @references Miller, E. T., D. R. Farine, and C. H. Trisos. 2016. Phylogenetic community
#' structure metrics and null models: a review with new methods and software.
#' Ecography DOI: 10.1111/ecog.02070
#'
#' @examples
#' #simulate tree with birth-death process
#' tree <- geiger::sim.bdtree(b=0.1, d=0, stop="taxa", n=50)
#'
#' sim.abundances <- round(rlnorm(5000, meanlog=2, sdlog=1)) + 1
#'
#' cdm <- simulateComm(tree, richness.vector=10:25, abundances=sim.abundances)
simulateComm <- function(tree, richness.vector, abundances)
{
#set up a quick check to confirm that you are not asking the function to sample more
#species than are in the tree
if(max(richness.vector) > length(tree$tip.label))
{
stop("Cannot create a CDM with more species than are in the input phylogeny")
}
#check that there are no values less than 1 in the abundances vector
if(min(abundances <= 0))
{
stop("simulateComm cannot handle abundances of less than or equal to 0")
}
#set up a matrix of zeros of the correct dimensions for the output cdm
cdm <- matrix(nrow=length(richness.vector), ncol=length(tree$tip.label), 0)
#give the cdm row and column names
colnames(cdm) <- tree$tip.label
row.names(cdm) <- paste("plot",1:dim(cdm)[1], sep="")
setwd("C:/LocalData/susakort/field work Nepal/Honeybee_decline_Nepal/Rscripts")
#Figure dir and pixels
ppi<-300 #pixels per inches
dirF<-"../Figures/"
#load library
library(tidyverse)
library(tidytext)
library(ggpubr)
library(ggpmisc)
library(rstatix)
#data
dt<-read.csv("../data/beehive_data_all.csv")
#Proportion of visits by honeybees to selected plants
pd<-read.csv("../data/poll_dependence.csv", sep=";",check.names=FALSE)
head(pd)
#all plants
hi_crop_fil<-hi_crop %>% filter(grepl("Phaseolus_vulgaris|Capsicum_sp.|Malus_domestica|Glycine_max|Prunus_armeniaca|Prunus_domestica|Brassica_alba|Prunus_persica|Pyrus_communis|Helianthus_annuus|Phaseolus_vulgaris|Phaseolus_coccineus|Vigna_unguiculata|Amygdalus_communis|Macrotyloma_uniflorum|Vicia_faba", Crop))
hi_crop<-read.csv("../data/honeybee_importance_percrop_pervillage.tsv.csv", sep="",check.names=FALSE)
head(hi_crop)
unique(hi_crop$Crop)
#all plants
hi_crop_fil<-hi_crop %>% filter(grepl("Phaseolus_vulgaris|Capsicum_sp.|Malus_domestica|Glycine_max|Prunus_armeniaca|Prunus_domestica|Brassica_alba|Prunus_persica|Pyrus_communis|Helianthus_annuus|Phaseolus_vulgaris|Phaseolus_coccineus|Vigna_unguiculata|Amygdalus_communis|Macrotyloma_uniflorum|Vicia_faba", Crop))
hi_crop_fil
#all plants
hi_crop_fil2<-hi_crop %>% filter(grepl("Phaseolus_vulgaris|Capsicum_sp.|Malus_domestica|Glycine_max|Prunus_armeniaca|Prunus_domestica|Brassica_alba|Prunus_persica|Pyrus_communis|Helianthus_annuus|Phaseolus_vulgaris|Phaseolus_coccineus|Vigna_unguiculata|Amygdalus_communis|Macrotyloma_uniflorum|Vicia_faba", Crop))
#village-wise pollen capacity and importance
#arrange data by village and descending importance of plants for honeybees
bi_reorder<-hi_crop_fil2 %>% arrange(Village, desc(vQ)) %>% group_by(Village) %>%  mutate(rank = dense_rank(desc(vQ)))
bi_reorder
hi_crop_fil2$n_nas <- ifelse(hi_crop_fil2$vQ==0, NA, hi_crop_fil2$vQ)
hi_crop_fil3<-hi_crop_fil2 %>% complete(Crop, Village)
hi_crop_fil3
hi_crop_fil3$n_nas <- ifelse(hi_crop_fil3$vQ==0, NA, hi_crop_fil3$vQ)
ggplot(hi_crop_fil3, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(n_nas,  digits=2)), angle = 0, size=3) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white", name = "% visits")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
#all plants
hi_crop_fil2<-hi_crop %>% filter(grepl("Phaseolus_vulgaris|Capsicum_sp.|Malus_domestica|Glycine_max|Prunus_armeniaca|Prunus_domestica|Brassica_alba|Prunus_persica|Pyrus_communis|Helianthus_annuus|Phaseolus_vulgaris|Phaseolus_coccineus|Vigna_unguiculata|Amygdalus_communis|Macrotyloma_uniflorum|Vicia_faba", Crop))
hi_crop_fil2
View(hi_crop_fil2)
hi_crop_fil2$n_nas <- ifelse(hi_crop_fil2$vQ==0, NA, hi_crop_fil2$vQ)
hi_crop_fil3<-hi_crop_fil2 %>% complete(Crop, Village)
hi_crop_fil3
View(hi_crop_fil3)
#all plants
hi_crop_fil2<-hi_crop %>% filter(grepl("Phaseolus_vulgaris|Capsicum_sp.|Malus_domestica|Glycine_max|Prunus_armeniaca|Brassica_alba|Prunus_persica|Pyrus_communis|Helianthus_annuus|Phaseolus_vulgaris|Phaseolus_coccineus|Vigna_unguiculata|Amygdalus_communis|Macrotyloma_uniflorum|Vicia_faba", Crop))
hi_crop_fil2$n_nas <- ifelse(hi_crop_fil2$vQ==0, NA, hi_crop_fil2$vQ)
hi_crop_fil3<-hi_crop_fil2 %>% complete(Crop, Village)
hi_crop_fil3$n_nas <- ifelse(hi_crop_fil3$vQ==0, NA, hi_crop_fil3$vQ)
ggplot(hi_crop_fil3, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(n_nas,  digits=2)), angle = 0, size=3) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white", name = "% visits")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
ggballoonplot(hi_crop_fil3, x = "Village", y = "n_nas", size = "Freq",
fill = "Freq",
ggtheme = theme_bw()) +
scale_fill_viridis_c(option = "C")
data("HairEyeColor")
df <- as.data.frame(HairEyeColor)
head(df)
ggballoonplot(hi_crop_fil3, x = "Viallage", y = "Crop", size = "n_nas",
fill = "n_nas", facet.by = "Sex",
ggtheme = theme_bw()) +
scale_fill_viridis_c(option = "C")
ggballoonplot(hi_crop_fil3, x = "Viallage", y = "Crop", size = "n_nas",
fill = "n_nas",
ggtheme = theme_bw()) +
scale_fill_viridis_c(option = "C")
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "n_nas",
fill = "n_nas",
ggtheme = theme_bw()) +
scale_fill_viridis_c(option = "C")
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "n_nas",
fill = "n_nas",
ggtheme = theme_bw()) +
scale_fill_viridis_c(option = "C", name = "% visits")
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "n_nas",
fill = "n_nas",
ggtheme = theme_bw()) +
font.label = list(size = 12, color = "black", style="italic")
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "n_nas",
fill = "n_nas",
ggtheme = theme_bw()) +
font.label = list(size = 12, color = "black", style="italic")+
scale_fill_viridis_c(option = "C", name = "% visits")
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "n_nas",
fill = "n_nas",
ggtheme = theme_bw()) +
font.label = list(size = 12, color = "black")+
scale_fill_viridis_c(option = "C", name = "% visits")
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "n_nas",
fill = "n_nas",
ggtheme = theme_bw())
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "n_nas",
fill = "n_nas",
ggtheme = theme_bw()) +
font.label = list(style= "italic", size = 12, color = "black")
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "n_nas",
fill = "n_nas",
ggtheme = theme_bw()) +
scale_fill_viridis_c(option = "C", name = "% visits")
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "n_nas",
fill = "n_nas",
ggtheme = theme_bw()) +
scale_fill_viridis_c(option = "C", name = "% visits")
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "n_nas",
fill = "n_nas",
ggtheme = theme_bw(),
font.label = list(style="italic", size = 12, color = "black")) +
scale_fill_viridis_c(option = "C", name = "% visits")
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "n_nas",
fill = "n_nas",
ggtheme = theme_bw(),
font.label = list(style="italic", size = 14, color = "black")) +
scale_fill_viridis_c(option = "C", name = "% visits")
hi_crop_fil3$n_nas
colnames(hi_crop_fil3)
colnames(hi_crop_fil3)[7]
colnames(hi_crop_fil3)[7]<-"% visits"
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "% visits",
fill = "% visits",
ggtheme = theme_bw(),
font.label = list(style="italic", size = 14, color = "black")) +
scale_fill_viridis_c(option = "C", name = "% visits")
ggsave(paste0(dirF, "heatmap_prop_vis_Apis.png"),width=8, height = 6, units="in", dpi=600 )
ggsave(paste0(dirF, "heatmap_prop_vis_Apis.png"),width=8, height = 6, units="in", dpi=600 )
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "% visits",
fill = "% visits",
size.range = c(1, 10),
ggtheme = theme_bw(),
font.label = list(style="italic", size = 14, color = "black")) +
scale_fill_viridis_c(option = "C", name = "% visits")
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "% visits",
fill = "% visits",
size.range = c(1, 20),
ggtheme = theme_bw(),
font.label = list(style="italic", size = 14, color = "black")) +
scale_fill_viridis_c(option = "C", name = "% visits")
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "% visits",
fill = "% visits",
size.range = c(1, 15),
ggtheme = theme_bw(),
font.label = list(style="italic", size = 14, color = "black")) +
scale_fill_viridis_c(option = "C", name = "% visits")
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "% visits",
fill = "% visits",
size.range = c(1, 12),
ggtheme = theme_bw(),
font.label = list(style="italic", size = 14, color = "black")) +
scale_fill_viridis_c(option = "C", name = "% visits")
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "% visits",
fill = "% visits",
size.range = c(1, 13),
ggtheme = theme_bw(),
font.label = list(style="italic", size = 14, color = "black")) +
scale_fill_viridis_c(option = "C", name = "% visits")
pd
ggsave(paste0(dirF, "heatmap_prop_vis_Apis.png"),width=8, height = 6, units="in", dpi=600 )
View(pd)
hi_crop
hi_crop$Crop
pl.sel2$sci_name
unique(pl.sel2$sci_name)
unique(pd$sci_name)
#all plants
hi_crop_fil2<-hi_crop %>% filter(grepl("Phaseolus_vulgaris|Capsicum_sp.|Cucurbita_maxima|Malus_domestica|Glycine_max|Cucumis_sativus|Cyclanthera_pedata|Prunus_armeniaca|Solanum_lycopersicon|Fagopyrum tataricum|Brassica_alba|Solanum melongena|Prunus_persica|Pyrus_communis|Helianthus_annuus|Phaseolus_vulgaris|Phaseolus_coccineus|Cyphomandra_betacea|Vigna_unguiculata|Momordica_charantia|Amygdalus_communis|Macrotyloma_uniflorum|Vicia_faba", Crop))
hi_crop_fil3<-hi_crop_fil2 %>% complete(Crop, Village)
hi_crop_fil3$n_nas <- ifelse(hi_crop_fil3$vQ==0, NA, hi_crop_fil3$vQ)
colnames(hi_crop_fil3)[7]<-"% visits"
ggballoonplot(hi_crop_fil3, x = "Village", y = "Crop", size = "% visits",
fill = "% visits",
size.range = c(1, 13),
ggtheme = theme_bw(),
font.label = list(style="italic", size = 14, color = "black")) +
scale_fill_viridis_c(option = "C", name = "% visits")
ggsave(paste0(dirF, "heatmap_prop_vis_Apis.png"),width=8, height = 6, units="in", dpi=600 )
ggsave(paste0(dirF, "heatmap_prop_vis_Apis.png"),width=8, height = 6, units="in", dpi=600 )
hi_crop_fil3
hi_crop_fil3 %>% summarise(meanQ=mean(vQ))
hi_crop_fil3 %>% group_by(Crop) %>% summarise(meanQ=mean(vQ))
hi_crop_fil3 %>% group_by(Crop) %>% summarise(meanQ=mean(vQ), na.rm = TRUE)
hi_crop_fil3 %>% group_by(Crop) %>% summarise(meanQ=mean(vQ, na.rm = TRUE))
hi_crop_fil3 %>% group_by(Crop) %>% summarise(meanQ=mean(vQ, na.rm = TRUE)) %>% mutate(rank = dense_rank(desc(meanQ)))
hi_crop_fil3 %>% group_by(Crop) %>% summarise(meanQ=mean(vQ, na.rm = TRUE), max=max(vQ, na.rm = TRUE)) %>% mutate(rank = dense_rank(desc(meanQ)))
hi_crop_fil3 %>% group_by(Crop) %>% summarise(meanQ=mean(vQ, na.rm = TRUE), max=max(vQ, na.rm = TRUE), sd=sd(vQ, na.rm = TRUE)) %>% mutate(rank.mean = dense_rank(desc(meanQ)))
hi_crop_fil3 %>% group_by(Crop) %>% summarise(median=median(vQ, na.rm = TRUE), meanQ=mean(vQ, na.rm = TRUE), max=max(vQ, na.rm = TRUE)) %>% mutate(rank.mean = dense_rank(desc(meanQ)))
hi_crop_fil3 %>% group_by(Crop) %>%
summarise(meanQ=mean(vQ, na.rm = TRUE), max=max(vQ, na.rm = TRUE)) %>%
mutate(rank.mean = dense_rank(desc(meanQ))) %>%
arrange(rank.mean, desc(rank.mean))
hi_crop_fil3
hi_crop_fil3 %>% group_by(Crop) %>%
summarise(meanQ=mean(vQ, na.rm = TRUE), max=max(vQ, na.rm = TRUE)) %>%
mutate(rank.mean = dense_rank(desc(meanQ))) %>%
arrange(rank.mean, desc(rank.mean)) %>% summarise(Village=n())
hi_crop_fil3 %>% group_by(Crop) %>% summarise(Village=n())
hi_crop_fil2 %>% group_by(Crop) %>% summarise(Village=n())
