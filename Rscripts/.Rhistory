SB.ids<-which(poly.pa[1,]=="1")
SB.fw<-fw[SB.ids, SB.ids]
#Baltic Proper fw matrix
BP.ids<-which(poly.pa[2,]=="1")
BP.fw<-fw[BP.ids, BP.ids]
#Bothnian Sea fw matrix
BS.ids<-which(poly.pa[3,]=="1")
BS.fw<-fw[BS.ids, BS.ids]
#Bothnian Bay fw matrix
BB.ids<-which(poly.pa[4,]=="1")
BB.fw<-fw[BB.ids, BB.ids]
metric.names<-c("S","L", "LD", "C","Clust","Mod","PercOmni", "Omni", "PredPrey", "Can", "Bas", "Top", "Int", "GenSD", "VulSD", "meanSWTL", "meanLWTL", "meanPath","longPath") # "shortPath"
fwind<-matrix(NA,dim(poly.pa)[1],length(metric.names))			# matrix to be used for the loop
colnames(fwind)<-c(metric.names)
rownames(fwind)<-rownames(poly.pa)
### The loop to calculate the metrics and fill them into the matrix "fwind.p" given above
for (i in 1:dim(poly.pa)[1]) {
print(i)
sp.p<-which(poly.pa[i,]==1) 				# sp.p a
fw0.p<-fw[sp.p,sp.p]					#s remove singeltons from polygon
id1<-which(apply(fw0.p,1,sum)==0)
id2<-which(apply(fw0.p,2,sum)==0)
idd1<- which(1*(id1%in%id2)==1)
if (length(idd1)==0) fw1.p=fw0.p else fw1.p=fw0.p[-id1[idd1],-id1[idd1]]
fw1.pi<-graph.adjacency(fw1.p)
# Fundamental complexity measures
fwind[i,1]<- dim(fw1.p)[1]			 	# Number of nodes (trophospecies)
fwind[i,2]<- sum(fw1.p)    				# Number of links (feeding relationships)
fwind[i,3]<- sum(fw1.p)/dim(fw1.p)[1]		# Link density
fwind[i,4]<-fwind[i,2]/fwind[i,1]^2      		# Connectance (realized links relative to maximum possible n links)
# Community structureal measures
Clust<- transitivity(fw1.pi,vids=NULL)
fwind[i, 5]<- Clust
spingc <- spinglass.community(fw1.pi) 		# Compartmentalisation estimation based on simulated annealing (similar procedure to Guimera et al. paper, 2010)
spingc$modularity
fwind[i, 6]<- spingc$modularity			# cannot work with unconnected graph, code not finalized!
# Type of taxa
fwind[i,7]<-Fraction.omnivores(fw0.p)
fwind[i,8]<-Level.omnivory(fw0.p)
d.in<-degree(fw1.pi,mode="in")   					          	# in-degree of the trophospecies, indicates how many prey a taxon has
d.out<-degree(fw1.pi,mode="out")
Prey<- (fwind[i,1]-sum(1*(d.out==0)))/fwind[i,1] 			# Fraction of taxa with at least one predator in the web
Pred<- (fwind[i,1]-sum(1*(d.in==0)))/fwind[i,1] 			# Fraction of taxa with at least one resource in the web
fwind[i, 9]<- Pred/Prey							                # Pred/Prey --> Vulnerability
fwind[i, 10]<- sum(diag(fw1.p))/dim(fw1.p)[1]				# Fraction of cannibals
fwind[i,11] <-sum(1*(d.in==0))/fwind[i,1]					  # proportion basal trophospecies
fwind[i,12]	<-sum(1*(d.out==0))/fwind[i,1]				  # proportion top trophospecies
fwind[i,13]	<-1-fwind[i,11]-fwind[i,12]
fwind[i, 14]<- sd(colSums(fw1.p)/(sum(fw1.p)/dim(fw1.p)[1]))	# Standard deviation of mean generality
fwind[i, 15]<- sd(rowSums(fw1.p)/(sum(fw1.p)/dim(fw1.p)[1]))	# Standard deviation of mean generality
d.all<-degree(fw1.pi,mode="all")
#fwind[i, 16]<- sd(d.all)		# Link density
# Chain charcteristics
TrophInd(fw0.p)
#fwind[i,16]<-mean(TrophInd(fw0.p)[,1])
TL<-TLs(fw0.p) 						# Trophic level
#TL[1]<-0							# Set detritus to 0
fwind[i,16]<-mean(TL[,1])
fwind[i,17]<-mean(TL[,2])
#fwind[i,18]<- average.path.length(fw1.pi)
fwind[i,18]<- average.path.length(fw1.pi)
paths<- shortest.paths(fw1.pi)		 				# calculates the length of the shortest path from or to vertices in the network
#Longest.path<-Paths(fw0.p)[,2]
fwind[i,19]<- mean(Paths(fw0.p)[,2])
}
#draw food webs
#subsample adjacency matrices for the food webs
#Southern Baltic fw matrix
SB.ids<-which(poly.pa[1,]=="1")
SB.fw<-fw[SB.ids, SB.ids]
#Baltic Proper fw matrix
BP.ids<-which(poly.pa[2,]=="1")
BP.fw<-fw[BP.ids, BP.ids]
#Bothnian Sea fw matrix
BS.ids<-which(poly.pa[3,]=="1")
BS.fw<-fw[BS.ids, BS.ids]
#Bothnian Bay fw matrix
BB.ids<-which(poly.pa[4,]=="1")
BB.fw<-fw[BB.ids, BB.ids]
#make igraph edge.lists
SB.edge.list<-graph.adjacency(SB.fw)
SB.fw
#make igraph edge.lists
SB.edge.list<-graph.adjacency(as.matrix(SB.fw))
BP.edge.list<-graph.adjacency(as.matrix(BP.fw))
BS.edge.list<-graph.adjacency(as.matrix(BS.fw))
BB.edge.list<-graph.adjacency(as.matrix(BB.fw))
Cent.metrics.SB<- data.frame(
deg.SB=degree(SB.edge.list),
bet.SB=betweenness(SB.edge.list) ,
eig.SB=evcent(SB.edge.list)$vector ,
clo.SB=closeness(SB.edge.list)
)
Cent.metrics.BP<- data.frame(
deg.BP=degree(BP.edge.list),
bet.BP=betweenness(BP.edge.list) ,
eig.BP=evcent(BP.edge.list)$vector ,
clo.BP=closeness(BP.edge.list)
)
Cent.metrics.BS<- data.frame(
deg.BS=degree(BS.edge.list),
bet.BS=betweenness(BS.edge.list) ,
eig.BS=evcent(BS.edge.list)$vector ,
clo.BS=closeness(BS.edge.list)
)
Cent.metrics.BB<- data.frame(
deg.BB=degree(BB.edge.list),
bet.BB=betweenness(BB.edge.list) ,
eig.BB=evcent(BB.edge.list)$vector ,
clo.BB=closeness(BB.edge.list)
)
# Which taxa belong to which functional group
FG<-read.table("FG.txt")
# Which taxa belong to which functional group
FG<-read.table("FG.txt")
FG.SB<- FG[which(FG[,1]%in%rownames(SB.fw)),]
FG.BP<- FG[which(FG[,1]%in%rownames(BP.fw)),]
FG.BS<- FG[which(FG[,1]%in%rownames(BS.fw)),]
FG.BB<- FG[which(FG[,1]%in%rownames(BB.fw)),]
# Trophic level as a plotting parameter.
TL.SB<-TLs(SB.fw)[,1]
TL.BP<-TLs(BP.fw)[,1]
TL.BS<-TLs(BS.fw)[,1]
TLs
TLs(SB.fw)
# Trophic level as a plotting parameter.
TL.SB<-TLs(as.matrix(SB.fw))[,1]
# Trophic level as a plotting parameter.
TL.SB<-TLs(as.matrix(SB.fw))[,1]
TL.BP<-TLs(as.matrix(BP.fw))[,1]
TL.BS<-TLs(as.matrix(BS.fw))[,1]
TL.BB<-TLs(as.matrix(BB.fw))[,1]
layout.matrix.SB<-matrix(nrow=length(V(SB.edge.list)), ncol=2)
layout.matrix.SB[,1]<-runif(length(V(SB.edge.list))) # randomly assign along x-axis
layout.matrix.SB[,2]<-TL.SB # y-axis value based on trophic level
layout.matrix.BP<-matrix(nrow=length(V(BP.edge.list)), ncol=2)
layout.matrix.BP[,1]<-runif(length(V(BP.edge.list))) # randomly assign along x-axis
layout.matrix.BP[,2]<-TL.BP # y-axis value based on trophic level
layout.matrix.BS<-matrix(nrow=length(V(BS.edge.list)), ncol=2)
layout.matrix.BS[,1]<-runif(length(V(BS.edge.list))) # randomly assign along x-axis
layout.matrix.BS[,2]<-TL.BS # y-axis value based on trophic level
layout.matrix.BB<-matrix(nrow=length(V(BB.edge.list)), ncol=2)
layout.matrix.BB[,1]<-runif(length(V(BB.edge.list))) # randomly assign along x-axis
layout.matrix.BB[,2]<-TL.BB # y-axis value based on trophic level
groups.SB<- FG.SB[,3] # 1=non-living,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
groups.BP<- FG.BP[,3] # 1=non-organic,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
groups.BS<- FG.BS[,3] # 1=non-organic,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
groups.BB<- FG.BB[,3] # 1=non-organic,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
colbar.FG<- c("darkgrey","lightgreen","cyan","orange","blue","magenta","lightpink")
par(mai=c(0,0,0,0))
par(mar=c(.5,.5,.5,.5),mfrow=c(1,1))
# Plot
plot(SB.edge.list, layout=layout.matrix.SB, vertex.size = 1/5*degree(SB.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.SB],vertex.label = NA, edge.color="grey40", edge.width=0.15)
plot(BP.edge.list, layout=layout.matrix.BP, vertex.size = 1/5*degree(SB.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.BP],vertex.label = NA, edge.color="grey40", edge.width=0.15)
plot(BS.edge.list, layout=layout.matrix.BS, vertex.size = 1/5*degree(BS.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.BS],vertex.label = NA, edge.color="grey40", edge.width=0.15)
plot(BB.edge.list, layout=layout.matrix.BB, vertex.size = 1/5*degree(BB.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.BB],vertex.label = NA, edge.color="grey40", edge.width=0.15)
FG
FG.SB<- FG[which(FG[,1]%in%rownames(SB.fw)),]
FG.SB
layout.matrix.SB
layout.matrix.BP
SB.fw
as.matrix(SB.fw)
groups.SB
FG.SB[,3]
FG.SB
as.matrix(SB.fw)
FG.SB[,3]
FG.SB
match(FG.SB[,1],colnames(as.matrix(SB.fw)))
match(FG.SB[,1],colnames(as.matrix(SB.fw)))
groups.SB<- order(FG.SB,3)[match(FG.SB[,1],colnames(as.matrix(SB.fw)))] # 1=non-living,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
groups.SB<- order(FG.SB[,3][match(FG.SB[,1],colnames(as.matrix(SB.fw)))]) # 1=non-living,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
groups.SB
groups.SB<- order(FG.SB[,3])[[match(FG.SB[,1],colnames(as.matrix(SB.fw)))]] # 1=non-living,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
groups.SB<- order(FG.SB[,3])[match(FG.SB[,1],colnames(as.matrix(SB.fw)))] # 1=non-living,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
groups.SB
FG.SB[,3]
groups.SB<- FG.SB[,3][order(match(FG.SB[,1],colnames(as.matrix(SB.fw))))] # 1=non-living,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
groups.SB
# Plot
plot(SB.edge.list, layout=layout.matrix.SB, vertex.size = 1/5*degree(SB.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.SB],vertex.label = NA, edge.color="grey40", edge.width=0.15)
groups.BS<- FG.BS[,3][order(match(FG.BS[,1],colnames(as.matrix(BS.fw))))] # 1=non-organic,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
groups.BB<- FG.BB[,3][order(match(FG.BB[,1],colnames(as.matrix(BB.fw))))] # 1=non-organic,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
plot(BP.edge.list, layout=layout.matrix.BP, vertex.size = 1/5*degree(SB.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.BP],vertex.label = NA, edge.color="grey40", edge.width=0.15)
groups.SB<- FG.SB[,3][order(match(FG.SB[,1],colnames(as.matrix(SB.fw))))] # 1=non-living,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
groups.BP<- FG.BP[,3][order(match(FG.BP[,1],colnames(as.matrix(BP.fw))))] # 1=non-organic,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
groups.BS<- FG.BS[,3][order(match(FG.BS[,1],colnames(as.matrix(BS.fw))))] # 1=non-organic,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
groups.BB<- FG.BB[,3][order(match(FG.BB[,1],colnames(as.matrix(BB.fw))))] # 1=non-organic,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
plot(BP.edge.list, layout=layout.matrix.BP, vertex.size = 1/5*degree(SB.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.BP],vertex.label = NA, edge.color="grey40", edge.width=0.15)
plot(BS.edge.list, layout=layout.matrix.BS, vertex.size = 1/5*degree(BS.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.BS],vertex.label = NA, edge.color="grey40", edge.width=0.15)
plot(BB.edge.list, layout=layout.matrix.BB, vertex.size = 1/5*degree(BB.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.BB],vertex.label = NA, edge.color="grey40", edge.width=0.15)
plot(BS.edge.list, layout=layout.matrix.BS, vertex.size = 1/5*degree(BS.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.BS],vertex.label = NA, edge.color="grey40", edge.width=0.15)
groups.BP<- FG.BP[,3][order(match(FG.BP[,1],colnames(as.matrix(BP.fw))))] # 1=non-organic,2=phytopl, 3=zoopl, 4=benthos, 5=fish, 6=birds, 7=mammals
groups.BP
plot(BP.edge.list, layout=layout.matrix.BP, vertex.size = 1/5*degree(SB.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.BP],vertex.label = NA, edge.color="grey40", edge.width=0.15)
plot(BS.edge.list, layout=layout.matrix.BS, vertex.size = 1/5*degree(BS.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.BS],vertex.label = NA, edge.color="grey40", edge.width=0.15)
plot(BS.edge.list, layout=layout.matrix.BS, vertex.size = 1/5*degree(BS.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.BS],vertex.label = NA, edge.color="grey40", edge.width=0.15)
plot(BB.edge.list, layout=layout.matrix.BB, vertex.size = 1/5*degree(BB.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.BB],vertex.label = NA, edge.color="grey40", edge.width=0.15)
plot(BS.edge.list, layout=layout.matrix.BS, vertex.size = 1/5*degree(BS.edge.list)+4, vertex.frame.color = "gray50", edge.arrow.size=F,  vertex.color=colbar.FG[groups.BS],vertex.label = NA, edge.color="grey40", edge.width=0.15)
hi_crop<-read.csv("../data/honeybee_importance_percrop_pervillage.tsv.csv", sep="",check.names=FALSE)
head(hi_crop)
unique(hi_crop$Crop)
setwd("C:/LocalData/susakort/field work Nepal/Honeybee_decline_Nepal/Rscripts")
#Figure dir and pixels
ppi<-300 #pixels per inches
dirF<-"../Figures/"
#load library
library(tidyverse)
library(tidytext)
library(ggpubr)
library(ggpmisc)
library(rstatix)
#data
dt<-read.csv("../data/beehive_data_all.csv")
hi_crop<-read.csv("../data/honeybee_importance_percrop_pervillage.tsv.csv", sep="",check.names=FALSE)
head(hi_crop)
unique(hi_crop$Crop)
hi_crop
head(hi_crop)
bee_import<-read.table("../data/honeybee_importance_percrop_pervillage.txt", header=T)
head(bee_import)
id.gadi<-which(hi_crop[,3]=="GADI")
id.gadi
id.pat<-which(hi_crop[,3]=="PATM")
bee_import[id.pat,]
hi_crop[id.pat,]
#village-wise pollen capacity and importance
#arrange data by village and descending importance of plants for honeybees
bi_reorder<-hi_crop %>% arrange(Village, desc(vQ)) %>% group_by(Village) %>%  mutate(rank = dense_rank(desc(vQ)))
bi_reorder
bi_reorder$vQ
bi_reorder
View(bi_reorder)
bi_reorder %>% filter(Crop=="Helianthus_annuus")
pd<-read.csv("../data/poll_dependence.csv", sep=";",check.names=FALSE)
pd$plant_category
pd$sci_name
head(pd)
pd$plant_category
pd[grep(paste(v1, collapse="|"), pd$plant_category),]
pd %>% filter(grepl('herb_spice|fruit_nut|oilseed', player))
pd %>% filter(grepl('herb_spice|fruit_nut|oilseed', plant_category))
pd$plant_category)
pd$plant_category
pd %>% filter(grepl('herb_spice|fruit_nut|oilseed|pulse', plant_category))
pd$plant_category
pl-sel<-pd %>% filter(grepl('herb_spice|fruit_nut|oilseed|pulse', plant_category))
pl.sel<-pd %>% filter(grepl('herb_spice|fruit_nut|oilseed|pulse', plant_category))
pl.sel
pl.sel$sci_name
pl.sel$sci_name
hi_crop
head(hi_crop)
hi_crop %>% filter(grepl("Phaseolus vulgaris"|"Capsicum sp."|"Malus domestica"|"Glycine max"|"Prunus armeniaca"|"Prunus domestica"|"Brassica alba"|
"Prunus persica"|"Pyrus communis"|"Helianthus annuus"|"Phaseolus vulgaris"|"Phaseolus coccineus"|"Vigna unguiculata"|
"Amygdalus communis"|"Macrotyloma uniflorum"|"Vicia faba", Crop))
hi_crop$Crop
hi_crop %>% filter(grepl("Phaseolus vulgaris"|"Capsicum sp.", Crop))
hi_crop %>% filter(grepl("Phaseolus vulgaris"|"Capsicum sp", Crop))
hi_crop %>% filter(grepl("Phaseolus vulgaris|Capsicum sp.", Crop))
hi_crop
hi_crop %>% filter(grepl("Phaseolus vulgaris|Capsicum sp.", Crop))
hi_crop %>% filter(Crop=="Phaseolus vulgaris")
hi_crop %>% filter(Crop==Phaseolus vulgaris)
hi_crop %>% filter(Crop==Cyclanthera_pedata)
hi_crop %>% filter(Crop=="Cyclanthera_pedata")
hi_crop %>% filter(Crop=="Phaseolus vulgaris")
hi_crop$Crop
hi_crop %>% filter(grepl("Phaseolus_vulgaris|Capsicum_sp.|Malus_domestica|Glycine_max|Prunus_armeniaca|Prunus_domestica|Brassica_alba|
Prunus_persica|Pyrus_communis|Helianthus_annuus|Phaseolus_vulgaris|Phaseolus_coccineus|Vigna_unguiculata|
Amygdalus_communis|Macrotyloma_uniflorum|Vicia_faba, Crop))
hi_crop %>% filter(grepl("Phaseolus_vulgaris|Capsicum_sp.|Malus_domestica|Glycine_max|Prunus_armeniaca|Prunus_domestica|Brassica_alba
hi_crop %>% filter(grepl("Phaseolus_vulgaris|Capsicum_sp.|Malus_domestica|Glycine_max|Prunus_armeniaca|Prunus_domestica|Brassica_alba|Prunus_persica|Pyrus_communis|Helianthus_annuus|Phaseolus_vulgaris|Phaseolus_coccineus|Vigna_unguiculata|Amygdalus_communis|Macrotyloma_uniflorum|Vicia_faba, Crop))
hi_crop %>% filter(grepl("Phaseolus_vulgaris|Capsicum_sp.|Malus_domestica|Glycine_max|Prunus_armeniaca|Prunus_domestica|Brassica_alba|Prunus_persica|Pyrus_communis|Helianthus_annuus|Phaseolus_vulgaris|Phaseolus_coccineus|Vigna_unguiculata|Amygdalus_communis|Macrotyloma_uniflorum|Vicia_faba", Crop))
hi_crop %>% filter(grepl("Phaseolus_vulgaris|Capsicum_sp.|Malus_domestica|Glycine_max|Prunus_armeniaca|Prunus_domestica|Brassica_alba|Prunus_persica|Pyrus_communis|Helianthus_annuus|Phaseolus_vulgaris|Phaseolus_coccineus|Vigna_unguiculata|Amygdalus_communis|Macrotyloma_uniflorum|Vicia_faba", Crop))
hi_crop_fil<-hi_crop %>% filter(grepl("Phaseolus_vulgaris|Capsicum_sp.|Malus_domestica|Glycine_max|Prunus_armeniaca|Prunus_domestica|Brassica_alba|Prunus_persica|Pyrus_communis|Helianthus_annuus|Phaseolus_vulgaris|Phaseolus_coccineus|Vigna_unguiculata|Amygdalus_communis|Macrotyloma_uniflorum|Vicia_faba", Crop))
pd
pl.sel2<-pd %>% filter(grepl(fruit_nut|oilseed', plant_category))
pl.sel2<-pd %>% filter(grepl("fruit_nut|oilseed', plant_category))
pl.sel2<-pd %>% filter(grepl('fruit_nut|oilseed', plant_category))
pl.sel2
pl.sel2$sci_name
hi_crop_fil2<-hi_crop %>% filter(grepl("Malus_domestica|Prunus_armeniaca|Prunus_domestica|Brassica_alba|Prunus_persica|Pyrus_communis|Helianthus_annuus|Amygdalus_communis", Crop))
hi_crop_fil2
#village-wise pollen capacity and importance
#arrange data by village and descending importance of plants for honeybees
bi_reorder<-hi_crop_fil2 %>% arrange(Village, desc(vQ)) %>% group_by(Village) %>%  mutate(rank = dense_rank(desc(vQ)))
bi_reorder
hi_crop_fil2
#village-wise pollen capacity and importance
#arrange data by village and descending importance of plants for honeybees
bi_reorder<-hi_crop_fil2 %>% arrange(Village, desc(vQ)) %>% group_by(Crop) %>%  mutate(rank = dense_rank(desc(vQ)))
bi_reorder
#village-wise pollen capacity and importance
#arrange data by village and descending importance of plants for honeybees
bi_reorder<-hi_crop_fil2 %>% arrange(Village, desc(vQ)) %>% group_by(Village) %>%  mutate(rank = dense_rank(desc(vQ)))
bi_reorder
View(bi_reorder)
hi_crop_fil2$n_nas <- ifelse(hi_crop_fil2$vQ==0, NA, hi_crop_fil2$vQ)
hi_crop_fil2
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.25) +
geom_text(aes(label = Freq)) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.25)
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.25) +
geom_text(aes(label = Freq)) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.25) +
geom_text(aes(label = vQ)) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = vQ)) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = vQ), size=0.2) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = vQ), size=0.4) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = vQ), size=0.8) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = vQ)) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = vQ)) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(face = "bold", color = "black",
size = 12, angle = 90))
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = vQ)) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(face = "", color = "black",
size = 12, angle = 90))
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = vQ)) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(color = "black",
size = 12, angle = 90))
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = vQ), angle = 90) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(vQ)), angle = 90) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(vQ), digits=2), angle = 90) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(vQ,  digits=2)), angle = 90) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(vQ,  digits=2)), angle = 0) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(vQ,  digits=2)), angle = 0, size=1) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
ggplot(hi_crop_fil2, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(vQ,  digits=2)), angle = 0, size=3) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
hi_crop_fil2
hi_crop_fil2 %>% complete(Crop, Village, n_nas)
hi_crop_fil2 %>% complete(Crop, Village)
a<-hi_crop_fil2 %>% complete(Crop, Village)
View(a)
hi_crop_fil3<-hi_crop_fil2 %>% complete(Crop, Village)
ggplot(hi_crop_fil3, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(vQ,  digits=2)), angle = 0, size=3) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
hi_crop_fil2<-hi_crop %>% filter(grepl("Malus_domestica|Prunus_armeniaca|Prunus_domestica|Brassica_alba|Prunus_persica|Pyrus_communis|Helianthus_annuus|Amygdalus_communis", Crop))
hi_crop_fil2
hi_crop_fil3<-hi_crop_fil2 %>% complete(Crop, Village)
hi_crop_fil3
hi_crop_fil3$n_nas <- ifelse(hi_crop_fil2$vQ==0, NA, hi_crop_fil2$vQ)
hi_crop_fil3$n_nas <- ifelse(hi_crop_fil3$vQ==0, NA, hi_crop_fil3$vQ)
hi_crop_fil3
ggplot(hi_crop_fil3, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(vQ,  digits=2)), angle = 0, size=3) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
View(hi_crop_fil3)
hi_crop_fil3
hi_crop_fil2
hi_crop_fil2$n_nas <- ifelse(hi_crop_fil2$vQ==0, NA, hi_crop_fil2$vQ)
hi_crop_fil2
hi_crop_fil3
hi_crop_fil3$n_nas
ggplot(hi_crop_fil3, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(n_nas,  digits=2)), angle = 0, size=3) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
pd
pd$eng_name
head(pd)
pl.sel2<-pd %>% filter(grepl('fruit_nut|oilseed|pulse', plant_category))
pl.sel2$sci_name
pl.sel2$eng_name
fruit_nut_oilseed_pulse<-"Jumli bean|Apple|Soybean|Apricot|Plum|Mustard seed|Peach|Pear|Sunflower|Green bean|Scarlet bean|Cowpea|Almonds|Horse gram|Faba bean"
hi_crop_fil2<-hi_crop %>% filter(grepl(fruit_nut_oilseed_pulse, Crop))
hi_crop_fil2
fruit_nut_oilseed_pulse
hi_crop_fil2<-hi_crop %>% filter(grepl(fruit_nut_oilseed_pulse, eng_name))
hi_crop
pd
hi_crop %>% inner_join(pl.sel, on = "Crop==sci_name")
hi_crop %>% inner_join(pl.sel, by = "Crop==sci_name")
hi_crop %>% inner_join(pl.sel, by = c("Crop=sci_name"))
hi_crop %>% inner_join(pl.sel, by = c("Crop" = "sci_name"))
pl.sel
hi_crop
pl.sel2$sci_name
fruit_nut_oilseed_pulse_sci<-"Phaseolus vulgaris|Malus domestica|Glycine max|Prunus armeniaca|Prunus domestica|Brassica alba|Prunus persica|Pyrus communis|Helianthus annuus|Phaseolus vulgaris|Phaseolus coccineus|Vigna unguiculata|Amygdalus communis|Macrotyloma uniflorum|Vicia faba"
hi_crop_fil2<-hi_crop %>% filter(grepl(fruit_nut_oilseed_pulse_sci, Crop))
hi_crop_fil2
hi_crop
fruit_nut_oilseed_pulse_sci
hi_crop_fil2<-hi_crop %>% filter(grepl(fruit_nut_oilseed_pulse_sci, Crop))
hi_crop_fil2
fruit_nut_oilseed_pulse_sci<-"Phaseolus vulgaris|Malus domestica|Glycine max|Prunus armeniaca|Prunus domestica|Brassica alba|Prunus persica|Pyrus communis|Helianthus annuus|Phaseolus vulgaris|Phaseolus coccineus|Vigna unguiculata|Amygdalus communis|Macrotyloma uniflorum|Vicia faba"
fruit_nut_oilseed_pulse_sci
hi_crop_fil2<-hi_crop %>% filter(grepl(fruit_nut_oilseed_pulse_sci, Crop))
hi_crop
fruit_nut_oilseed_pulse_sci<-"Phaseolus_vulgaris|Malus_domestica|Glycine_max|Prunus_armeniaca|Prunus_domestica|Brassica_alba|Prunus_persica|Pyrus_communis|Helianthus_annuus|Phaseolus_vulgaris|Phaseolus_coccineus|Vigna_unguiculata|Amygdalus_communis|Macrotyloma_uniflorum|Vicia_faba"
hi_crop_fil2<-hi_crop %>% filter(grepl(fruit_nut_oilseed_pulse_sci, Crop))
hi_crop_fil2
hi_crop_fil3<-hi_crop_fil2 %>% complete(Crop, Village)
hi_crop_fil3$n_nas <- ifelse(hi_crop_fil3$vQ==0, NA, hi_crop_fil3$vQ)
ggplot(hi_crop_fil3, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(n_nas,  digits=2)), angle = 0, size=3) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
pd
fruit_nut_oilseed_pulse_sci<-"Phaseolus_vulgaris|Malus_domestica|Glycine_max|Prunus_armeniaca|Brassica_alba|Prunus_persica|Pyrus_communis|Helianthus_annuus|Phaseolus_vulgaris|Phaseolus_coccineus|Vigna_unguiculata|Amygdalus_communis|Macrotyloma_uniflorum|Vicia_faba"
hi_crop_fil2<-hi_crop %>% filter(grepl(fruit_nut_oilseed_pulse_sci, Crop))
hi_crop_fil3<-hi_crop_fil2 %>% complete(Crop, Village)
hi_crop_fil3$n_nas <- ifelse(hi_crop_fil3$vQ==0, NA, hi_crop_fil3$vQ)
ggplot(hi_crop_fil3, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(n_nas,  digits=2)), angle = 0, size=3) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
ggplot(hi_crop_fil3, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(n_nas,  digits=2)), angle = 0, size=3) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white", name = "Prop\Visits")+
legend_title <- "Prop\Visits"
legend_title <- "Prop\Visits"
legend_title <- c("Prop\Visits")
labels <- list(sp.pa="Species\ndissimilarity",
environmental="Environmental\ndistance",
sp.bm="Biomass\ndissimilarity",
traits="Trait\ndissimilarity",
foodweb="Food web\ndistance",
fluxes="Fluxes\ndistance")
labels
ggplot(hi_crop_fil3, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(n_nas,  digits=2)), angle = 0, size=3) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white", name = "Prop.vis")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
ggplot(hi_crop_fil3, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(n_nas,  digits=2)), angle = 0, size=3) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white", name = "%vis")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
ggplot(hi_crop_fil3, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(n_nas,  digits=2)), angle = 0, size=3) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white", name = "% vis")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
ggplot(hi_crop_fil3, aes(x=Village, y=Crop, fill=n_nas)) +
geom_tile(color="white", size = 0.5) +
geom_text(aes(label = round(n_nas,  digits=2)), angle = 0, size=3) +
scale_fill_gradient(low="gold", high="darkorchid", na.value="white", name = "% visits")+
theme(axis.text.x = element_text(color = "black", size = 12, angle = 90))
ggsave(paste0(dirF, "heatmap_prop_vis_Apis.png"),width=8, height = 10, units="in", dpi=600 )
dirF
ggsave(paste0(dirF, "heatmap_prop_vis_Apis.png"),width=8, height = 6, units="in", dpi=600 )
head(pd)
